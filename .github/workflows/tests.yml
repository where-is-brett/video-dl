name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install FFmpeg (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install FFmpeg (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg

    - name: Install FFmpeg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    # - name: Run linting
    #   run: |
    #     black . --check
    #     isort . --check-only
    #     flake8 .
    #     mypy src/

    - name: Run tests
      run: |
        pytest --cov=video_dl --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

  docs:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      run: |
        mkdocs gh-deploy --force

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r src/ -ll
        safety check

  # notify:
  #   needs: [test, package, docs, security]
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Send notification
  #     if: ${{ failure() }}
  #     uses: dawidd6/action-send-mail@v3
  #     with:
  #       server_address: smtp.gmail.com
  #       server_port: 465
  #       username: ${{ secrets.EMAIL_USERNAME }}
  #       password: ${{ secrets.EMAIL_PASSWORD }}
  #       subject: Github Actions (video-dl) - ${{ github.workflow }} failed
  #       body: Workflow ${{ github.workflow }} failed in ${{ github.repository }}
  #       to: maintainers@example.com
  #       from: Github Actions
  #       secure: true

  cleanup:
    needs: [test, package, docs, security]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Clean up resources
      run: |
        # Add cleanup steps if needed
        echo "Cleanup complete"
